# youtube_revenue_prediction.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# STEP 1: Load Dataset
file_path = "youtube_trending_with_revenue_20000.xlsx"  # or .csv
try:
    df = pd.read_excel(file_path)
except:
    df = pd.read_csv(file_path)

print(" Dataset Loaded Successfully!")
print(df.head(), "\n")
print(f"Number of entries: {len(df)}\n")

# STEP 2: Data Preprocessing
df = df.dropna()

# Log-transform numeric columns to stabilize variance
df["log_views"] = np.log1p(df["views"])
df["log_likes"] = np.log1p(df["likes"])
df["log_comments"] = np.log1p(df["comment_count"])

# STEP 3: Features and Target
X = df[["log_views", "log_likes", "log_comments", "rpm_usd"]]
y = df["estimated_revenue_usd"]

# STEP 4: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# STEP 5: Feature Scaling (helps many models)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# STEP 6: Model Training — Random Forest (better nonlinear fit)
model = RandomForestRegressor(
    n_estimators=150,
    random_state=42,
    max_depth=12,
    min_samples_split=5,
    n_jobs=-1
)
model.fit(X_train_scaled, y_train)

# STEP 7: Predictions
y_pred = model.predict(X_test_scaled)

# STEP 8: Evaluation
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(" Model Performance:")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"R² Score: {r2:.4f}\n")

# STEP 9: Comparison Table
comparison = pd.DataFrame({
    "Actual Revenue (USD)": y_test.values,
    "Predicted Revenue (USD)": y_pred
})
print(comparison.head(10))

# STEP 10: Visualization
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.5, color="blue")
plt.xlabel("Actual Revenue (USD)")
plt.ylabel("Predicted Revenue (USD)")
plt.title("Actual vs Predicted YouTube Revenue")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color="red", linestyle="--")
plt.tight_layout()
plt.show()
